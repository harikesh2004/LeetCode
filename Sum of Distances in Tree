class Solution:
    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:
        g = [[] for i in range(n)]
        for e in edges:
            g[e[0]] += [e[1]]
            g[e[1]] += [e[0]]
        
        treeSize = [0] * n
        dist = [0] * n

        def dfs(u, p):
            dist[u] = 0
            treeSize[u] = 1
            for v in g[u]:
                if v != p:
                    dfs(v, u)
                    treeSize[u] += treeSize[v]
                    dist[u] += dist[v] + treeSize[v]
        dfs(0, 0)

        def util(u, p):
            parentContribution = dist[p] - dist[u] - int(u != p) * treeSize[u]
            dist[u] += parentContribution + (n - treeSize[u]) 
            for v in g[u]:
                if v != p:
                    util(v, u)
        util(0, 0)

        return dist
